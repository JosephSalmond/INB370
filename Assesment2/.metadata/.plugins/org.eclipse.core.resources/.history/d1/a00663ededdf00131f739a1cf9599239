package asgn2Vehicles;

import asgn2Exceptions.VehicleException;
import asgn2Simulators.Constants;

/** @author Joseph Salmond 8823928 */
public abstract class Vehicle {

    boolean parked;
    boolean queued;
    boolean satisfied;
    boolean wasParked;
    boolean wasQueued;

    int arrivalTime;
    int departureTime;
    int parkingTime;
    int queueTime;
    int intendedDuration;

    String vehID;

    // Vehicle Constructor
    public Vehicle(String vehID, int arrivalTime) throws VehicleException {
	if (arrivalTime <= 0) {
	    throw new VehicleException(
		    "Vehicle: Cannot arrive before you arrive");
	}
	this.vehID = vehID;
	this.arrivalTime = arrivalTime;
	this.departureTime = 0;
	this.satisfied = false;
	this.parked = false;
	this.queued = false;
	this.wasParked = false;
	this.wasQueued = false;

	// VehicleException - if arrivalTime is <= 0
    }

    // Transition vehicle to parked state
    public void enterParkedState(int parkingTime, int intendedDuration)
	    throws VehicleException {

	if (parked || queued) {
	    throw new VehicleException(
		    "enterParkedState: cannot be in two places at once");
	} else if (parkingTime <= 0) {
	    throw new VehicleException("enterParkedState: Negitive Park");
	} else if (intendedDuration < Constants.DEFAULT_INTENDED_STAY_SD) {
	    throw new VehicleException(
		    "enterParkedState: you need to stay longer");
	}

	this.parkingTime = parkingTime;
	this.intendedDuration = intendedDuration;
	this.departureTime = parkingTime + intendedDuration;
	parked = true;
	wasParked = true;

	// VehicleException - if the vehicle is already in a parked or queued
	// state, if parkingTime < 0, or if intendedDuration is less than the
	// minimum prescribed in asgnSimulators.Constraints

    }

    // Transition vehicle to queued state
    public void enterQueuedState() throws VehicleException {

	if (parked || queued) {
	    throw new VehicleException(
		    "enterParkedState: cannot be in two places at once");
	}

	queued = true;
	wasQueued = true;

	// VehicleException - if the vehicle is already in a queued or parked
	// state

    }

    // Transition vehicle from parked state
    public void exitParkedState(int departureTime) throws VehicleException {
	if (!parked || queued || (departureTime < parkingTime)) {
	    throw new VehicleException("exitParkedState: ");
	}

	parked = false;
	wasParked = true;
	satisfied = true;
	// VehicleException - if the vehicle is not in a parked state, is in a
	// queued state or if the revised departureTime < parkingTime

    }

    // Transition vehicle from queued state
    public void exitQueuedState(int exitTime) throws VehicleException {

	if (parked || !queued) {
	    throw new VehicleException("exitQueuedState: ");
	} else if (arrivalTime > exitTime) {
	    throw new VehicleException("exitQueuedState: ");
	}

	queued = false;
	queueTime = exitTime;
	// VehicleException - if the vehicle is in a parked state or not in a
	// queued state, or if exitTime is not later than arrivalTime for this
	// vehicle

    }

    // Simple getter for the arrival time
    public int getArrivalTime() {
	return arrivalTime;
    }

    // Simple getter for the departure time from the car park
    public int getDepartureTime() {
	return departureTime;
    }

    // Simple getter for the parking time
    public int getParkingTime() {
	return parkingTime;
    }

    // Simple getter for the vehicle ID
    public String getVehID() {
	return vehID;
    }

    // Boolean status indicating whether vehicle is currently parked
    public boolean isParked() {
	return parked;
    }

    // Boolean status indicating whether vehicle is currently queued
    public boolean isQueued() {
	return queued;
    }

    // Boolean status indicating whether customer is satisfied or not Satisfied
    // if they park
    public boolean isSatisfied() {
	return satisfied;
    }

    // Overrides toString in class java.lang.Object
    @Override
    public String toString() {
	String endl = System.getProperty("line.separator");

	String stringQueue;
	if (wasQueued) {
	    stringQueue = "Exit ffrom Queue: " + queueTime + endl
		    + " Queuing Time " + (queueTime - arrivalTime) + endl;
	} else {
	    stringQueue = "Vehicle was not queued";
	}
	
	String stringPark;
	if(wasParked){
	    stringPark = "Entry to Car Park: ";
	}else{
	    stringPark = "Vehicle was not parked";
	}

	String str = "Vehicle vehID: " + vehID + endl + "Arrival Time: "
		+ arrivalTime + endl + stringQueue + stringPark;

	return str;
    }

    // Boolean status indicating whether vehicle was ever parked
    public boolean wasParked() {
	return wasParked;
    }

    // Boolean status indicating whether vehicle was ever queued
    public boolean wasQueued() {
	return wasQueued;
    }
}
