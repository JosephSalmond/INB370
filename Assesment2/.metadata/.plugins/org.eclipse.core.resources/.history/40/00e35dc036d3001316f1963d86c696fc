package asgn2CarParks;

import asgn2Exceptions.VehicleException;
import asgn2Exceptions.SimulationException;
import asgn2Vehicles.Vehicle;

/**
 * **USE, BUT YOU MAY NEED TO CHANGE THE VAR NAMES *** Method used to provide
 * the current status of the car park. Uses private status String set whenever a
 * transition occurs. Example follows (using high probability for car creation).
 * At time 262, we have 276 vehicles existing, 91 in car park (P), 84 cars in
 * car park (C), of which 14 are small (S), 7 MotorCycles in car park (M), 48
 * dissatisfied (D), 176 archived (A), queue of size 9 (CCCCCCCCC), and on this
 * iteration we have seen: car C go from Parked (P) to Archived (A), C go from
 * queued (Q) to Parked (P), and small car S arrive (new N) and go straight into
 * the car park<br>
 * 262::276::P:91::C:84::S:14::M:7::D:48::A:176::Q:9CCCCCCCCC|C:P>A||C:Q>P||S:N>
 * P|
 * 
 * @return String containing current state
 */

/** @author Joseph Salmond 8823928 */
public class CarPark {

	// CarPark constructor sets the basic size parameters.
	public CarPark() {

	}

	// CarPark constructor sets the basic size parameters.
	public CarPark(int maxCarSpaces, int maxSmallCarSpaces,
			int maxMotorCycleSpaces, int maxQueueSize) {

	}

	// Archives vehicles exiting the car park after a successful st
	public void archiveDepartingVehicles(int time, boolean force)
			throws VehicleException, SimulationException {
		// VehicleException - if vehicle to be archived is not in the correct
		// state
		// SimulationException - if one or more departing vehicles are not in
		// the car park when operation applied
	}
	
	
	// Method to archive new vehicles that don't get parked or queued and are
	// turned away
	public void archiveNewVehicle(Vehicle v) throws SimulationException {
		//SimulationException - if vehicle is currently queued or parked
		
	}
	
	// Archive vehicles which have stayed in the queue too long
	public void archiveQueueFailures(int time)
            throws VehicleException{
		//VehicleException - if one or more vehicles not in the correct state
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	public String getStatus(int time) {
		String str = time + "::" + this.count + "::" + "P:"
				+ this.spaces.size() + "::" + "C:" + this.numCars + "::S:"
				+ this.numSmallCars + "::M:" + this.numMotorCycles + "::D:"
				+ this.numDissatisfied + "::A:" + this.past.size() + "::Q:"
				+ this.queue.size();
		for (Vehicle v : this.queue) {
			if (v instanceof Car) {
				if (((Car) v).isSmall()) {
					str += "S";
				} else {
					str += "C";
				}
			} else {
				str += "M";
			}
		}
		str += this.status;
		this.status = "";
		return str + "\n";
	}

	/**
	 * SAME COMMENTS State dump intended for use in logging the initial state of
	 * the carpark. Mainly concerned with parameters.
	 * 
	 * @return String containing dump of initial carpark state
	 */
	public String initialState() {
		return "CarPark [maxCarSpaces: " + this.maxCarSpaces
				+ " maxSmallCarSpaces: " + this.maxSmallCarSpaces
				+ " maxMotorCycleSpaces: " + this.maxMotorCycleSpaces
				+ " maxQueueSize: " + this.maxQueueSize + "]";
	}
}
