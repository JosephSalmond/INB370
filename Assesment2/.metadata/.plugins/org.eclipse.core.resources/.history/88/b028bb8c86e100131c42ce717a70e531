package asgn2Simulators;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Random;

import javax.swing.JPanel;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.time.Minute;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RefineryUtilities;

import asgn2Examples.RandomTimeSeries;

public class GUISimulator extends ApplicationFrame{
/*
 *Add CLI args  if no args then default if 10 args process else throw error
 *fill boxes with defaults || fill with 10 cli arfs
 *
 *maxCarSpaces, maxMotorCycleSpaces, maxQueueSize >= 0
 *0 <= maxSmallCarSpaces <= maxCarSpaces
 *cp check if valid
 *you may deal with invalid data by an error message via the text area or modal dialog
 * 
Text Box non negitive 0 <-> 10000
public static final int DEFAULT_MAX_CAR_SPACES = 100;
public static final int DEFAULT_MAX_SMALL_CAR_SPACES = 30;
public static final int DEFAULT_MAX_MOTORCYCLE_SPACES = 20;
public static final int DEFAULT_MAX_QUEUE_SIZE = 10;
public static final int DEFAULT_SEED = 100; // 0 <-> Max_int - 1

Sliders
public static final double DEFAULT_CAR_PROB = 1.0;
public static final double DEFAULT_SMALL_CAR_PROB = 0.20;
public static final double DEFAULT_MOTORCYCLE_PROB = 0.05;
public static final double DEFAULT_INTENDED_STAY_MEAN = 120.0; //1 <-> CLOSING_TIME


 */
    private static final String TITLE = "Random Car Park";
    int cars;
    int mc;
	TimeSeriesCollection tsc = new TimeSeriesCollection(); 
	TimeSeries vehTotal = new TimeSeries("Total Vehicles");
	TimeSeries carTotal = new TimeSeries("Total Cars"); 
	TimeSeries mcTotal = new TimeSeries("MotorCycles");
	Calendar cal = GregorianCalendar.getInstance();
	
	
    public GUISimulator(final String title) {
        super(title);
	cars = 0;
	mc = 0; 
        final TimeSeriesCollection dataset = createTimeSeriesData(); 
        JFreeChart chart = createChart(dataset);
        this.add(new ChartPanel(chart), BorderLayout.CENTER);
        JPanel btnPanel = new JPanel(new FlowLayout());
        this.add(btnPanel, BorderLayout.SOUTH);
        
    }
    
    
    /**
     * Private method creates the dataset. Lots of hack code in the 
     * middle, but you should use the labelled code below  
	 * @return collection of time series for the plot 
	 */
	private TimeSeriesCollection createTimeSeriesData() {
		
		//Base time, data set up - the calendar is needed for the time points
		Calendar cal = GregorianCalendar.getInstance();
		Random rng = new Random(250); 
		
		cars = 0;
		mc = 0; 
		
		//Hack loop to make it interesting. Grows for half of it, then declines
		for (int i=0; i<=18*60; i++) {
			//These lines are important 
			cal.set(2014,0,1,6,i);
	        Date timePoint = cal.getTime();
	        
	        //HACK BEGINS
	        if (i<9*60) {
	        	if (randomSuccess(0.2,rng)) {
	        		cars++; 
	        	}
	        	if (randomSuccess(0.1,rng)) {
	        		mc++;
	        	}
	        } else if (i < 18*60) {
	        	if (randomSuccess(0.15,rng)) {
	        		cars++; 
	        	} else if (randomSuccess(0.4,rng)) {
	        		cars = Math.max(cars-1,0);
	        	}
	        	if (randomSuccess(0.05,rng)) {
	        		mc++; 
	        	} else if (randomSuccess(0.2,rng)) {
	        		mc = Math.max(mc-1,0);
	        	}
	        } else {
	        	cars=0; 
	        	mc =0;
	        }
	        //HACK ENDS
	        
	        //This is important - steal it shamelessly 
			mcTotal.add(new Minute(timePoint),mc);
			carTotal.add(new Minute(timePoint),cars);
			vehTotal.add(new Minute(timePoint),cars+mc);
		}
		
		//Collection
		tsc.addSeries(vehTotal);
		tsc.addSeries(carTotal);
		tsc.addSeries(mcTotal);
		return tsc; 
	}
	private boolean randomSuccess(double successProb,Random rng) {
		boolean result = rng.nextDouble() <= successProb;
		return result;
	}
    
    /**
     * Helper method to deliver the Chart - currently uses default colours and auto range 
     * @param dataset TimeSeriesCollection for plotting 
     * @returns chart to be added to panel 
     */
    private JFreeChart createChart(final XYDataset dataset) {
        final JFreeChart result = ChartFactory.createTimeSeriesChart(
            TITLE, "hh:mm:ss", "Vehicles", dataset, true, true, false);
        final XYPlot plot = result.getXYPlot();
        ValueAxis domain = plot.getDomainAxis();
        domain.setAutoRange(true);
        ValueAxis range = plot.getRangeAxis();
        range.setAutoRange(true);
        return result;
    }
    
    /**
     * Simple main GUI runner 
     * @param args ignored 
     */
    public static void main(final String[] args) {
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
        	GUISimulator demo = new GUISimulator(TITLE);
                demo.pack();
                RefineryUtilities.centerFrameOnScreen(demo);
                demo.setVisible(true);
            }
        });
    }
}
